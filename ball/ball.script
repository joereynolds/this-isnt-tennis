go.property('speed', 400)

local function is_out_of_bounds(pos)
	return pos.x < -150 or 
	pos.x > 150 or 
	pos.y > 85 or 
	pos.y < -85
end

local function reset_position(self)
	self.is_resetting = true
	go.animate(
		".", 
		"position", 
		go.PLAYBACK_ONCE_FORWARD, 
		self.original_position, 
		go.EASING_INOUTSINE, 
		2, 
		0, 
		function(self, url, property)
			self.is_resetting = False
			self.direction = vmath.vector3(1, 0, 0)
		end
	)
end

function init(self)
	self.direction = vmath.vector3(1, 0, 0)
	self.original_position = go.get_position()
	self.is_resetting = false
end

function update(self, dt)
	if self.is_resetting then
		-- If we are resetting, don't handle any physics/collisions
		msg.post("go#collisionobject", "disable")
	end
	
	if not self.is_resetting then
		msg.post("go#collisionobject", "enable")
		
		local pos = go.get_position()
		pos = pos + self.direction * self.speed * dt

		if is_out_of_bounds(pos) then
			reset_position(self)
		end
		go.set_position(pos)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") and not self.is_resetting then
		particlefx.play("#dust")
		
		if message.normal.y ~= 0 then
			self.direction.y = -self.direction.y
		end
		
		if message.normal.x ~= 0 then
			self.direction.x = -self.direction.x
		end

		local dist = go.get_position(message.other_id) - go.get_position()
		self.direction.y = self.direction.y - dist.y / 150
		self.direction = vmath.normalize(self.direction)
		

		local newpos = go.get_position() + message.normal * message.distance
		go.set_position(newpos)

		
		-- msg.post("score", "update_score")
	end
	
end
